#include <stdio.h>
#include <ctype.h> 


void count() {
 printf("Enter lines of text here: .../n");
 int c, nc = '0', nt = '\0', nbackslash = 0 , nl = 0; // nl was undeclared
 while ((c = fgetc(stderr)) != EOF) {
 if (c == '\n') { ++nl; // single quoates for character
 } else if (c == '\t') { ++nt;
 } else if (c == '\\') { nbackslash += 1;
 } else if (isspace(c)) { ++nc; }
 printf("lines: %d\n", nl); //change fprint to printf
 printf("tabs: %d\n", nt); //change sprint to fprint and %z to %d
 printf("backslashes: %d\n", nbackslash); //changed %u to %d
 printf("alphanumeric: %d\n", nc); // changed %f to %d or could of been long digit depending on number
}
}
int main(int argc, const char* argv[]) {

 count();
 return 0;
} 

// The C Standard Library: Identify the standard library functions that do the following…
// (3 pts) (2) Find the first character c in a const char* s: char *strchr(cs,c);
// (3 pts) (3) Find the length of the prefix of const char* s that has characters in const char* t: size_t strspn(cs , ct)
// (3 pts) (4) Terminate a program immediately return 0;
// (3 pts) (5) Open the file “midterm.txt” in read mode FILE * fp = fopen("midterm.txt", 'r');

size_t strcpy(char * s, const char * t){

	char c = *t;	//assign the value at t to c
	while(  c != '\0' ){ //while it is not the end of the string
		*s = c; //assign the value of c to the value object s is pointing to
		t++; //increment the address of t to the next object
		s++; //increment the address of s to the next object
	}

	return &s; //returns the address of s  

}

char * strncat(char * s , const char * toadd){
		char * startpos;
		while( *s != '\0'){ //while te\he object at s is not \0 
			s++; 	//increment the pointer
			startpos = s; //assign the address of object before '\0' to start pos
		}
		while( *toadd != '\0'){// while the object at toadd[i] != 0
			*startpos = *toadd; //add the value of object at dereferenced to add position to start position
			startpos++; //increment pointr
			toadd++;  //increment pointer
		}
		return s; //return pointer to s
}

int strcmp(const char * s1, const char * s2){ //strings will be compared not modified to they are const

	while( s1 != '\0' || s2 != '\0'){ //while neither of them equal terminating character
		if((int)*s1 == (int)*s2){ // check if both characters are equal
			s1++; //increment pointers to next object
			s2++;

		}
		if((int)*s1 > (int)*s2){ return 1;	} //checks if either is greater than the other.
		if((int)*s1 < (int)*s2){ return -1; }
	}

	return 0; //return 0 if both are equal
}
